package ru.progwards.java1.lessons.datetime;

public class SessionManager {

    класс UserSession, структура данных следующая:
    private int sessionHandle;
    private String userName;
    private <дата-время> lastAccess;

    Все свойства приватные, сделать для них методы-геттеры (getSessionHandle(), getUserName(), getLastAccess()) соответствующих типов,

    метод updateLastAccess() -  обновляет время доступа к сессии,

    а также конструктор

    public UserSession(String userName) - создать сессию пользователя. Внутри автоматически сгенерировать sessionHanle, для примера использовать просто случайное число через класс Random, а так же установить текущее время доступа.


            3.2 Реализовать класс SessionManager, структура данных следующая:

    private <коллекция> sessions;
    private int sessionValid;

3.3 реализовать конструктор
    public SessionManager(int sessionValid) - создает экземпляр SessionManager и сохраняет sessionValid - период валидности сессии в секундах.

    Реализовать методы:

            3.4 public void add(UserSession userSession) - добавляет новую сессию пользователя

3.5 public UserSession find(String userName) - проверяет наличие существующей сессии по userName. Если срок валидности истек, или такой  сессии нет, возвращает null. В противном случае возвращает сессию, обновив ее дату доступа.

            3.6 public UserSession get(int sessionHandle) - проверяет наличие существующей сессии по хендлу. Если срок валидности истек, или такой  сессии нет, возвращает null. В противном случае возвращает сессию, обновив ее дату доступа.

            3.7 public void delete(int sessionHandle) - удаляет указанную сессию пользователя

3.8 public deleteExpired() - удаляет все сессии с истекшим сроком годности.



    Протестировать следующим образом:

    Создать сессию по userName, для этого
- сделать find,
- убедиться что вернется null
            - создать новую сессию
- добавить используя add

    Вызвать несколько раз get

    Подождать (Thread.sleep) время, большее, чем время валидности

    Проверить что сессии нет через метод get

    Создать еще одну сессию

    Подождать половину времени валидности сессии

    Создать еще одну сессию

    Подождать еще раз половину времени валидности сессии

    Вызвать deleteExpired()

    Убедиться, что одна сессия удалена, вторая нет

    Удалить оставшуюся через метод delete

    Убедиться что удаление прошло
}
